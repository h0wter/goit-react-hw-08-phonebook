{"version":3,"file":"static/js/811.2dc8d2d9.chunk.js","mappings":"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","sources":["components/Box.js","components/ContactForm/ContactForm.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { layout, space } from 'styled-system';\n\nexport const Box = styled('div')(layout, space);\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  width: 300px;\n  margin-bottom: 30px;\n  padding: 10px;\n  border: 1px solid;\n`;\n","import styled from 'styled-components';\n\nexport const StyledButton = styled.button`\n  font-size: 12px;\n  background-color: transparent;\n  border: 1px solid;\n  border-radius: 6px;\n  cursor: pointer;\n`;\n","import { PropTypes } from 'prop-types';\nimport { StyledButton } from './Button.styled';\n\nexport const Button = ({\n  onClick = function () {},\n  type,\n  children,\n  disabled,\n}) => {\n  return (\n    <StyledButton disabled={disabled} onClick={onClick} type={type}>\n      {children}\n    </StyledButton>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.string.isRequired,\n};\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filters.filter;\n\nexport const getDeletingId = state => state.contacts.deletingId;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Formik, Field } from 'formik';\nimport { Box } from 'components/Box';\nimport { StyledForm } from './ContactForm.styled';\nimport { Button } from 'components/Button/Button';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onSubmit = (name, number) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n  };\n\n  const onInputChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        console.log('error');\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={(name, number)}\n        onSubmit={() => {\n          onSubmit(name, number);\n          setName('');\n          setNumber('');\n        }}\n      >\n        <StyledForm autoComplete=\"off\">\n          <label htmlFor=\"name\">Name</label>\n          <Box mt=\"10px\" mb=\"15px\">\n            <Field\n              name=\"name\"\n              type=\"text\"\n              onChange={onInputChange}\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </Box>\n          <label htmlFor=\"number\">Number</label>\n          <Box mb=\"15px\">\n            <Field\n              name=\"number\"\n              type=\"tel\"\n              onChange={onInputChange}\n              value={number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </Box>\n          <Button type=\"submit\">Add contact</Button>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { Box } from 'components/Box';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <Box mt=\"5px\" mb=\"15px\">\n        <input\n          name=\"filter\"\n          type=\"text\"\n          onChange={e => {\n            dispatch(setFilter(e.target.value));\n          }}\n        />\n      </Box>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  list-style: disc;\n  margin-left: 38px;\n`;\n\nexport const ContactData = styled.span`\n  margin-right: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ContactItem, ContactData } from './Contact.styled';\nimport { Button } from 'components/Button/Button';\nimport { deleteContact } from 'redux/operations';\nimport { getDeletingId } from 'redux/selectors';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const { name, number, id } = contact;\n  const deletingId = useSelector(getDeletingId);\n\n  return (\n    <ContactItem>\n      <ContactData>\n        {name}: {number}\n      </ContactData>\n      <Button\n        disabled={id === deletingId}\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        Delete\n      </Button>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contact';\nimport { getContacts, getFilter } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = filter\n    ? contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contacts;\n\n  return (\n    <>\n      <ul>\n        {filteredContacts.map(contact => {\n          return <Contact contact={contact} key={contact.id} />;\n        })}\n      </ul>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box } from 'components/Box';\nimport { GlobalStyle } from 'components/GlobalStyle';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Box as=\"h2\" mb=\"10px\">\n        Phonebook\n      </Box>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <GlobalStyle />\n    </>\n  );\n}\n"],"names":["Box","styled","layout","space","StyledForm","Form","StyledButton","Button","onClick","type","children","disabled","getContacts","state","contacts","items","getFilter","filters","filter","getDeletingId","deletingId","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","onInputChange","e","target","value","console","log","initialValues","onSubmit","find","contact","toLowerCase","alert","addContact","autoComplete","htmlFor","mt","mb","onChange","pattern","title","required","Filter","setFilter","ContactItem","ContactData","Contact","id","deleteContact","ContactList","filteredContacts","includes","map","Contacts","useEffect","fetchContacts","as","GlobalStyle"],"sourceRoot":""}